import pygame
from pygame.locals import *
import math, sys
Tamanho_tela_x = 800
Tamanho_tela_y = 600
 
Tamanho_mapa_x = 800
Tamanho_mapa_y = 600
 
DIREITA = 0
ESQUERDA = 1
 
diretorio_imagens = ""
def clamp(x, minimo, maximo):
    return max(minimo, min(maximo, x))
 
class Camera:
    def __init__(self, min_x, min_y, max_x, max_y):
        self.min_x, self.min_y = min_x, min_y
        self.max_x, self.max_y = max_x, max_y
        self.x = min_x
        self.y = min_y

    def center_on(self, x, y):
        new_x = x - Tamanho_tela_x / 2
        new_y = y - Tamanho_tela_y / 2
        self.x = clamp(new_x, self.min_x, self.max_x)
        self.y = clamp(new_y, self.min_y, self.max_y)


class Carro:
    def __init__(self):
        self.image = pygame.image.load(diretorio_imagens + 'car.png')#.convert()#_alpha()
        self.rect = self.image.get_rect()
        self.original = self.image
          
        self.x, self.y = Tamanho_tela_x/2, Tamanho_tela_y/2
        self.virtual_x, self.virtual_y = 567, 456
        self.angle = -90
        self.velocidade = 68 
        self.offset_x, self.offset_y = self.virtual_x - Tamanho_tela_x/2, self.virtual_y - Tamanho_tela_y/2
            
            
    def Mudar_direcao(self, direcao):
        if direcao == DIREITA:
                self.angle += (self.velocidade/10) * 0.5 
        elif direcao == ESQUERDA:
                self.angle -= (self.velocidade/10) * 0.5


    def Movimentacao(self,key):
        velocidadex = math.sin(self.angle * (math.pi/180)) * (self.velocidade/10)
        velocidadey = math.cos(self.angle * (math.pi/180)) * (self.velocidade/10) * -1

        if key[K_UP]:
            if self.velocidade < 40:
                self.velocidade += 1
        if key[K_DOWN]:
            if self.velocidade > -40:
                self.velocidade -= 1

        if self.velocidade > 0:
            self.virtual_x += velocidadex
            self.virtual_y += velocidadey
            if key[K_RIGHT]:
                self.Mudar_direcao(DIREITA)
 
            elif key[K_LEFT]:
                self.Mudar_direcao(ESQUERDA)
            if key[K_UP] == False:
                self.velocidade -= 1
            if key[K_DOWN]:
                self.velocidade -= 1

        if self.velocidade < 0:
            self.virtual_x += velocidadex
            self.virtual_y += velocidadey
            if key[K_RIGHT]:
                self.Mudar_direcao(DIREITA)
            elif key[K_LEFT]:
                self.Mudar_direcao(ESQUERDA)
            if key[K_DOWN] == False:
                self.velocidade += 1
            if key[K_UP]:
                self.velocidade += 1


        
        self.image =  pygame.transform.rotozoom(self.original, self.angle * -1, 1).convert()
        self.image.set_colorkey((0, 0, 0))
        self.rect = self.image.get_rect(center = (self.virtual_x, self.virtual_y))


        #print self.rect






    def draw(self, screen, camera):
        branco, preto = (255, 255, 255), (0, 0, 0)


        #Blita vaga
        Vaga = screen.blit(pygame.image.load("Vaga.png"), (-camera.x + 67, -camera.y + 180))
        self.Vaga = Rect(Vaga[0] -10, Vaga[1] - 10, Vaga[2] + 10, Vaga[3] + 20)

        #Detecta se o carro esta sobre a vaga
        self.rect = screen.blit(self.image, self.rect.move(-camera.x + 255 , -camera.y - 126))
        #print self.rect
        if self.Vaga.contains(self.rect):
            print "-x-"



        #Dicionario com as coordenadas do local dos carros da fase 
        Dic_fases = {"Fase_1": [ [64, 80], [71, 270], [78, 464], [339, 426],  [545, 122] ]}


        


        #Carrega imagens dos carros e define os retangulo do mesmos
        Lista_carros = [pygame.image.load("carro_objeto_" + str(img) + ".png").convert() for img in range(5)]
        Lista_colorkey = [imagem.set_colorkey(preto) for imagem in Lista_carros]
        Lista_rect_carros = [retangulo.get_rect() for retangulo in Lista_carros]
        Lista_mask_carros = [pygame.mask.from_surface(carro) for carro in Lista_carros]



        #Armazena os pontos principais dos carros
        for Fase in Dic_fases:
            for Coord in range(len(Dic_fases[Fase])):
                if Coord >= len(Lista_carros):
                    Coord -= (Coord / 2)

            
                pos_1 = Dic_fases[Fase][Coord][0]
                pos_2 = Dic_fases[Fase][Coord][1]
                self.image_mask = pygame.mask.from_surface(self.image)
                self.rect.topleft = (self.rect[0], self.rect[1])
    
                
                Lista_rect_carros[Coord] = screen.blit(Lista_carros[Coord],                                                                                        (-camera.x + pos_1, -camera.y + pos_2))


                Lista_rect_carros[Coord].topleft = (-camera.x + pos_1, -camera.y + pos_2)
                carros_mask = Lista_mask_carros[Coord]
                ofset_x, ofset_y = (Lista_rect_carros[Coord].left - self.rect.left),                                                            (Lista_rect_carros[Coord].top - self.rect.top)

                if (self.image_mask.overlap(Lista_mask_carros[Coord], (ofset_x, ofset_y)) != None):
                    print "-----------colidiu-------------"

    def Limites_bordas(self, camera):
        if self.velocidade <= 40: 
            #Cria o rect da parede
            Parede = Rect(-camera.x + 37, -camera.y + 71, -camera.x + 735, -camera.y + 490)

            #Detecta se o carro esta sobre a parede
            if not(Parede.contains(self.rect)):
                print "Parede"











class Jogo: 

    def Iniciar(self):
        pygame.init()

        screen= pygame.display.set_mode((Tamanho_tela_x, Tamanho_tela_y), HWSURFACE|DOUBLEBUF)
        screen.fill(0)
        background = pygame.image.load(diretorio_imagens + 'Fase_1.png').convert()
     
        carro = Carro() 
        clock = pygame.time.Clock()
        camera = Camera(0, 0, Tamanho_mapa_x - Tamanho_tela_x, Tamanho_mapa_y - Tamanho_tela_y)
     
        
        while True:
            clock.tick(60)
            for event in pygame.event.get():
                    if event.type == QUIT:
                        sys.exit()
                                 
                    if event.type == KEYDOWN:
                            if event.key == K_ESCAPE:
                                    Tela_menu = True
                                    Tela_jogo = False
            pygame.event.pump()
            key = pygame.key.get_pressed()
            carro.Movimentacao(key)
            camera.center_on(carro.virtual_x, carro.virtual_y)
            screen.blit(background, (-camera.x, -camera.y))
            carro.draw(screen, camera)
            carro.Limites_bordas(camera)
            pygame.display.flip()

jogo = Jogo()
jogo.Iniciar()
